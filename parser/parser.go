package parser

import (
	"johncosta.tech/xmlparse/lexer"
)

/*
  Using RDP (Recusive Descent Parsing) to parse this
  simply grammar. I have taken the algirthm from
  RHUL Compilers Course I took in the 3rd year.

  This algorithm is meant to be generated by a computer (compiler compiler), but for this project I wrote it by hand.

  This is why there's a lot of redundant IF statements double checking the same clause.
*/

func Parse(tokenList *lexer.TokenList) bool {
  hasParsed := parseTag(tokenList)
  return hasParsed && tokenList.Index == len(tokenList.Tokens)
}

// Note how we return true if none of the if statements were hit, this means that the tag could be null
func parseTag(tokens *lexer.TokenList) bool {

  if (!tokens.HasNext()) {
    return true
  }

  // First set of OpenTag
  if (tokens.Current().Token == lexer.LEFT_BRACKET) {

    parsed := parseOpenTag(tokens)
    if (!parsed) {
      return false
    }

    parsed = parseTag(tokens)
    if (!parsed) {
      return false
    }

    parsed = parseCloseTag(tokens)
    if (!parsed) {
      return false
    }

    parsed = parseTag(tokens)
    if (!parsed) {
      return false
    }

    return true

  } else if (tokens.Current().Token == lexer.TEXT) {

    if (tokens.Current().Token == lexer.TEXT) {
      tokens.Index += 1
    } else {
      return false
    }

    parsed := parseTag(tokens)
    if (!parsed) {
      return false
    }

    return true

  }

  return true
}

func parseOpenTag(tokenList *lexer.TokenList) bool {
  if (tokenList.Current().Token == lexer.LEFT_BRACKET) {

    if (tokenList.Current().Token == lexer.LEFT_BRACKET) {
      tokenList.Index += 1
    } else {
      return false
    }

    parsed := parseText(tokenList)

    if (!parsed) {
      return false
    }

    if (tokenList.Current().Token == lexer.RIGHT_BRACKET) {
      // Build AST
      tokenList.Index += 1
    } else {
      return false
    }

    return true
  }
  return false
}

func parseCloseTag(tokenList *lexer.TokenList) bool {
  if (tokenList.Current().Token == lexer.LEFT_AND_SLASH) {

    if (tokenList.Current().Token == lexer.LEFT_AND_SLASH) {
      // Build AST
      tokenList.Index += 1
    } else {
      return false
    }

    parsed := parseText(tokenList)
    if (!parsed) {
      return false
    }

    if (tokenList.Current().Token == lexer.RIGHT_BRACKET) {
      // Build AST
      tokenList.Index += 1
    } else {
      return false
    }

    return true
  }
  return false
}

func parseText(tokenList *lexer.TokenList) bool {
  if (tokenList.Current().Token == lexer.TEXT) {
    if (tokenList.Current().Token == lexer.TEXT) {
      // Build AST
      tokenList.Index += 1
    } else {
      return false
    }
    return true
  }
  return false
}
