package parser

import (
	"johncosta.tech/xmlparse/lexer"
)

/*
  Using RDP (Recusive Descent Parsing) to parse this
  simply grammar. I have taken the algirthm from
  RHUL Compilers Course I took in the 3rd year.

  This algorithm is meant to be generated by a computer (compiler compiler), but for this project I wrote it by hand.

  This is why there's a lot of redundant IF statements double checking the same clause.
*/

func Parse(tokens []lexer.Token) bool {
  hasParsed, index := parseTag(tokens, 0)
  return hasParsed && index == len(tokens)
}

// Note how we return true if none of the if statements were hit, this means that the tag could be null
func parseTag(tokens []lexer.Token, index int) (bool, int) {
  // First set of OpenTag
  if (tokens[index].Token == lexer.LEFT_BRACKET) {

    parsed, newIndex := parseOpenTag(tokens, index)
    if (!parsed) {
      return false, index
    }
    index = newIndex

    parsed, newIndex = parseTag(tokens, index)

    if (!parsed) {
      return false, index
    }
    index = newIndex

    parsed, newIndex = parseCloseTag(tokens, index)
    if (!parsed) {
      return false, index
    }
    index = newIndex

    return true, index

  } else if (tokens[index].Token == lexer.TEXT) {

    if (tokens[index].Token == lexer.TEXT) {
      // Build AST
      index += 1
    } else {
      return false, index
    }

    return true, index

  }

  return true, index
}

func parseOpenTag(tokens []lexer.Token, index int) (bool, int) {
  if (tokens[index].Token == lexer.LEFT_BRACKET) {

    if (tokens[index].Token == lexer.LEFT_BRACKET) {
      // Build AST
      index += 1
    } else {
      return false, index
    }

    parsed, newIndex := parseText(tokens, index)

    if (!parsed) {
      return false, index
    }
    index = newIndex

    if (tokens[index].Token == lexer.RIGHT_BRACKET) {
      // Build AST
      index += 1
    } else {
      return false, index
    }

    return true, index
  }
  return false, index
}

func parseCloseTag(tokens []lexer.Token, index int) (bool, int) {
  if (tokens[index].Token == lexer.LEFT_AND_SLASH) {

    if (tokens[index].Token == lexer.LEFT_AND_SLASH) {
      // Build AST
      index += 1
    } else {
      return false, index
    }

    parsed, newIndex := parseText(tokens, index)
    if (!parsed) {
      return false, index
    }
    index = newIndex

    if (tokens[index].Token == lexer.RIGHT_BRACKET) {
      // Build AST
      index += 1
    } else {
      return false, index
    }

    return true, index
  }
  return false, index
}

func parseText(tokens []lexer.Token, index int) (bool, int) {
  if (tokens[index].Token == lexer.TEXT) {
    if (tokens[index].Token == lexer.TEXT) {
      // Build AST
      index += 1
    } else {
      return false, index
    }
    return true, index
  }
  return false, index
}
